name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.23"

jobs:
  # Unit tests with race detection - primary quality gate
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21", "1.22", "1.23"]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run unit tests with race detection
      run: go test -v -race -timeout=5m ./...

  # Provider integration tests
  provider-tests:
    name: Provider Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        provider: [openai, anthropic, google, azure, bedrock]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run provider tests
      run: go test -v -timeout=10m ./providers/${{ matrix.provider }}/...

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run benchmarks
      run: go test -v -bench=. -benchmem -benchtime=10x -timeout=10m ./... | tee benchmark-results.txt
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt
        retention-days: 7

  # Code quality and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.8
        
    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m ./...
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Check formatting
      run: test -z $(gofmt -l .)

  # Security scanning with gosec
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      
    - name: Run gosec
      run: gosec -fmt sarif -out gosec-results.sarif ./...
      continue-on-error: true
      
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: gosec-results.sarif
        retention-days: 7

  # Ensure all checks pass
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [unit-tests, provider-tests, benchmarks, quality, security]
    if: always()
    steps:
    - name: Verify all checks passed
      run: |
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "One or more CI checks failed"
          exit 1
        fi
        echo "All CI checks passed successfully"